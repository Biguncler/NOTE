一，rxjava是什么
    Rx(Reactive Extensions)是一个库，采用观察者模式实现的用来处理事件和异步任务，rxjava是rx在java语言上的实现
    参考文档：http://cache.baiducontent.com/c?m=9f65cb4a8c8507ed4fece7631046893b4c4380146d96864968d4e414c42246101d31bfac2056585e8099297006db021bf7a376346c527ee0869edf0c8ee0cc69328f273f721e834115c75cf28b102a816a875a98fc45b1faad69c5&p=9c64c85685cc43f304bd9b7d0d1ccc&newp=882a9645dc9c5de902b6ca2d02148d231610db2151d3da01298ffe0cc4241a1a1a3aecbf2124110ed3cf7d6602a9485eeafa3572340634f1f689df08d2ecce7e7094616e2b42&user=baidu&fm=sc&query=RX+android&qid=8b5590f40000d817&p1=3
二，rxjava优点
    最概括的两个字：简洁。而且当业务越繁琐越复杂时这一点就越显出优势——它能够保持简洁。
三，rxjava的使用
    1，在module的gradle文件上配置依赖
        compile 'io.reactivex:rxandroid:1.2.1'
        compile 'io.reactivex:rxjava:1.1.6'
    2，创建被观察者Observable对象
                Observable observable=Observable.create(new Observable.OnSubscribe<Integer>() {
                    @Override
                    public void call(Subscriber<? super Integer> subscriber) {
                        Log.i("hello_kitty","callThread="+Thread.currentThread());
                        subscriber.onNext(1);
                        subscriber.onCompleted();
                    }
                });
    3，创建观察者Observer对象
                Subscriber<Integer> observer=new Subscriber<Integer>() {
                    @Override
                    public void onCompleted() {
                        Log.i("hello_kitty","onCompletedThead="+Thread.currentThread());
                    }

                    @Override
                    public void onError(Throwable e) {
                        Log.i("hello_kitty","onErrorThead="+Thread.currentThread());
                    }

                    @Override
                    public void onNext(Integer integer) {
                        Log.i("hello_kitty","onNextThead="+Thread.currentThread());
                    }
                };
    4，被观察者和观察者关联
                observable.subscribe(observer);

四，rxjava线程间的切换
    1，没有为Observable和Observer指定运行线程时
        Observable和Observer运行在observable.subscribe(observer)这句代码调用时的线程上
    2，为Observable和Observer指定运行线程时
        如：observable.subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(observer);
        Observable运行在Schedulers.io()线程上
        Observer运行在AndroidSchedulers.mainThread()
    3，总结：在不指定线程的情况下， RxJava 遵循的是线程 不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；
            在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到 Scheduler （调度器）。
    4，Scheduler ——调度器，相当于线程控制器，RxJava 通过它来指定每一段代码应该运行在什么样的线程、
        （1）Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。
        （2）Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。
        （3）Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，
            区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。
        （4）Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，
            大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。
        （5）AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行
五，rxjava的变换 所谓变换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列








