1，计算机高级语言分为编译型和解释型两种

2，将源码翻译成机器码的过程即为编译

3，编译型语言 将源码一次性通过编译器编译成机器码文件，然后运行在机器上的语言为编译型语言
   特点 (1) 脱离开发环境 （2）只能在特定平台上运行 （3） 执行效率高

4, 解释型语言 将源码通过解释器逐行解释成机器码并立即执行的语言为解释型语言
   特点 （1）不能脱离开发环境 （2）可以跨平台  （3） 执行效率低

5，java属于编译和解释型语言的结合体
    java将源码通过编译器编译成字节码文件(.class文件），然后通过解释器(jvm)逐行解释成机器码运行在机器上
    特点 (1) 脱离开发环境 （2） 跨平台  （3）执行效率较低
    --------------------2017，05，26--------------------

6, JDK (java development kit) 包含编译、运行java程序的所有资源和工具

7，JRE (java runtime environment) 运行字节码，包含了jvm

8，java程序的最小单元都是class文件，java程序是一个class文件的集合

9，java的源码文件必须是.java的扩展名

10，java源码文件名可以随意命名，但源码文件里面定义了一个public类时，源码文件名必须与public类相同

11，源码文件只能定义一个public类

12，java程序的入口是main方法，格式固定public static void main(String[] args){}

    --------------------2017，05，27--------------------
13，java垃圾回收机制特点
    （1）只回收内存资源，不能回收物理资源,如io,数据库链接
    （2）只回收JVM的堆内存资源
    （3）只回收无引用的对象
    （4）不定时回收，一般在资源紧张时后台自动回收

    --------------------2017，05，31--------------------
14，面向对象语言的三大特征：继承，封装，多态

    --------------------2017，06，01--------------------
15，java标识符的命名规则
    （1）只能由字母、数字、下划线(_)、美元符($)组成
    （2）不能是java的关键字和保留字，但可以包含这些字
    （3）不能以数字开头

16，java是强类型语言，变量、表达式在编译是就已经确定了类型，所以变量必须先声明在引用
17，java数据类型
    |--引用类型
    |--基本类型
        |--boolean类型      1bit
        |--数值类型
            |--浮点类型
                |--float    4byte
                |--double   8byte
            |--整数类型
                |--byte     1byte       [-2^7,2^7)
                |--short    2byte       [-2^15,2^15)
                |--int      4byte       [-2^31,2^31)
                |--long     8byte       [-2^63,2^63)
                |--char     2byte(char 字符型，本质上是整数类型)
    注：null只能装换成引用类型，不能转换成基本类型，所以不要给基本类型赋null值

    --------------------2017，06，02--------------------
18，整数类型特点
    （1）一个整数常量，java默认是int类型
    （2）将一个整数常量赋值给byte／short，如果该常量在byte／short的数值范围，java会自动将该整数转成byte／short
    （3）将一个整数常量赋值给long，java仍然将该整数当成int处理，除非在该整数后加L，java才会当成long处理
    （4）将一个整数常量赋值给char，如果该常量在char的数值范围，java会自动将该整数转成char
19，字符类型特点
    （1）以单引号''，引起字符
    （2）表达形式 char a='a', 或者 char='\uxxxx' (xxxx为16进制的unicode编码)
    （3）char是无符号的整数类型，取值范围是 [0,2^16)
20，浮点类型特点
    （1）浮点类型的表达形式有两种 一个是0.15包含点，一个是科学计数法0.15E2(只有浮点类型可以用科学计数法)
    （2）浮点类型不能精确的表示一个小数，必须用BigDecimal
    （3）一个小数，java默认是double类型
    （4）一个小数要表示成float类型，必须在小数后加F

    --------------------2017，06，07--------------------
21,java基本类型转换分自动动转换，强制类型转换
22，基本类型转换自动动转换
     (1) byte-->short-->
                      int-->long-->float-->double
              char-->
     (2) byte不能自动转换成char，因为char只表示正数，没有负数
23, 基本数据类型的运算
     (1) 当一个算术表达是包含多种基本数据类型时，java会先统一数据类型，然后在运算
     (2) 当一个算术表达是包含多种基本数据类型，java统一数据类型时，会取当前表达式中最大表达范围的数据类型作为基准，将低于该基准的数据类型自动向上转型到该基准

     --------------------2017，06，08--------------------
24 java运算符的类型
    （1）算术运算符 （+ - * ／ % ++ --）
    （2）赋值运算符 （=）
    （3）比较运算符 （> < >= <= == !=）
    （4）逻辑运算符 （& && | || ^ !  ?:）
    （5）位移运算符 （& | ~ ^ << >> >>>）
    （6）类型相关运算符 （instance of）
25，算术运算符
    （1）+ - * ／ % ++ --
    （2）a++ 表示先引用后自增1 如（a++ +b ）先引用a+b，然后a自增1，对于--也是一样
    （3）++和--只能是针对变量，如a++，a--，不能5++或者5--

    --------------------2017，06，12--------------------
26，switch
    （1）语句中的case 可以是byte ，short，char,int  不能用long，double，float
    （2）一旦遇到case相等时，如过该case 没有break，那么会继续执行下一个case，直到遇到break或这结束
27，循环语句
    （1）while(){}; , do{}while(); , for();
    （2）continue; 结束本次继续下个循环 ，break; 跳出循环 ，return; 结束方法
28，嵌套循环
     outer:
     for(){
        inner:
        for(){
           //  break outer;   跳出外部循环
           //  break inner;   跳出内部循环
        }
     }

    --------------------2017，06，13--------------------
29，数组
    （1）数组是个引用类型的数据
    （2）数组里的元素必须是同一数据类型
    （3）数组一旦初始化，那么该数组的长度是固定了
30，数组初始化
    （1）Object[] object=new Object[x];
    （2）Object[] object=new Object[]{object1,object2,object3}

     --------------------2017，06，15--------------------
31，泛型
    （1）含有泛型的类如：List<T> ,实现了泛型的类如：List<String> ,T为泛型，String为泛型的实现。
    （2）使用含有泛型的类时，必须先实现泛型 如：new ArrayList<String>
    （3）继承含有泛型的类，必须先实现泛型 如：B extends A<String> ,不能 B extends A<T>
    （4）含有泛型的类的对象，即使泛型的实现不同，对象都是同一类型 如：List a=new ArraList<String>  List b=new ArrayList<Integer>  a和b是同为ArrayList
    （5）含有泛型的类的对象，如果泛型的实现不同，则不能互相赋值 如：List a=new ArraList<String>  List b=new ArrayList<Integer> 不能a=b
    （6）含有泛型的类的对象，是继承关系，如果如果泛型的实现不同，则子类不能自动转型成父类 如：List<Object>!=ListArray<String>
    （7）泛型还包括通配符，泛型方法等，目前不清楚，待以后深入研究


    --------------------2017，11，16--------------------
32，集合
    （1）集合分为两类
        Collection接口 代表存储对象数据
        Map接口 代表存储映射关系数据

    （2）数组的元素可以是基本类型数据也可以是对象，但集合只能是对象

    （3）Collection及Map的实现
        Collection
            //image_colection_001
        Map
            //image_map_001
    （4）Colection的基本方法
        //image_collection_002

    （6）Set接口
        |--代表无序、不可重复
        |--当Set重复添加对像时，add方法返回false，重复的对象不能添加进去
        |--Set判断对象是否重复调用的是equal方法，即比较对象的引用是否一样，和"=="等效（String的equal方法被重写，不比较引用，比较内容是否相等）
    （7）HashCode是根据一定的规则将对象相关信息（如指针，字段）映射成一个数值，这个数值称为HashCode
    （8）HashSet类
        |--Set的子类
        |--代表无序hashCode不能重复
        |--HashSet add方法：先获取存储对象的hashCode值，从维护的索取表查找是否有相同hashCode值，如果有的然后在维护的索取表中加入hashCode值和对象即将在HashSet中存储的地址形成映射关系，
    （9）List
        |--指定list的容量
            |--list的容量默认是10
            |--ensureCapacity(int capacity)
            |--new ArrayList<T>(capacity)
        |--将list的容量缩成当前size
            |--trimToSize()
        |--如果预先知道list需要add很都的数据，可以设置list的默认容量来减少list的扩容次数，提高代码效率
        |--调用trimToSize()，可以使list减少内存占用。


    （10）集合的遍历
        |--Iterator
            |--Iterator的基本方法
                //image_iterator_001
            |--Iterator中cursor的初始位置是-1
            |--remove方法移除的是调用next后，cursor指向的元素
            |--Iterator在遍历时，不能调用集合的add和remove方法,只能用iterator的remove方法，否则会抛ConcrrentModificationException
        |--ListIterator
            |--Iterator的基本方法
                |--包含了Iterator的所有方法
                |--add() 在当前cursor的下个指针位置插入元素，但插入的元素并不在Iterator的遍历中
                |--nextIndex() 返回下一个元素的index
                |--hasPrevious() 和hasNext的方向相反
                |--previous() 和next方向相反

    （11）Collections工具类
        |--排序操作
            //image_colections_image_001
        |--查找替换操作
            //image_collections_image_002
        |--同步控制
           //image_collections_image_003



