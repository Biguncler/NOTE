/**
 * 由于应用程序使用的ClassLoader为PathClassLoader
 * 最终继承自 BaseDexClassLoader
 * 查看源码得知,这个BaseDexClassLoader加载代码根据一个叫做
 * dexElements的数组进行, 因此我们把包含代码的dex文件插入这个数组
 * 系统的classLoader就能帮助我们找到这个类
 * <p>
 * 这个类用来进行对于BaseDexClassLoader的Hook
 */
public final class BaseDexClassLoaderHookHelper {

    public static void patchClassLoader(ClassLoader cl, File apkFile, File optDexFile, String nativeLibraryPath)
            throws IllegalAccessException, NoSuchMethodException, IOException, InvocationTargetException,
            InstantiationException, NoSuchFieldException {
        // 获取 BaseDexClassLoader : pathList
        Field pathListField = DexClassLoader.class.getSuperclass().getDeclaredField("pathList");
        pathListField.setAccessible(true);
        Object pathListObj = pathListField.get(cl);

        // 1. insert dex elements

        // 获取 PathList: Element[] dexElements
        Field dexElementArray = pathListObj.getClass().getDeclaredField("dexElements");
        dexElementArray.setAccessible(true);
        Object[] dexElements = (Object[]) dexElementArray.get(pathListObj);

        Class<?> elementClass = dexElements.getClass().getComponentType();
        Object[] newElements = (Object[]) Array.newInstance(elementClass, dexElements.length + 1);
        Constructor<?> constructor =
                elementClass.getConstructor(File.class, boolean.class, File.class, DexFile.class);
        Object dexElement = constructor.newInstance(apkFile, false, apkFile,
                DexFile.loadDex(apkFile.getCanonicalPath(), optDexFile.getAbsolutePath(), 0));
        Object[] toAddElementArray = new Object[]{dexElement};
        System.arraycopy(dexElements, 0, newElements, 0, dexElements.length);
        System.arraycopy(toAddElementArray, 0, newElements, dexElements.length, toAddElementArray.length);
        dexElementArray.set(pathListObj, newElements);


        // 2. insert native library path
        // TODO: 2017/7/19  兼容8.0
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1) {
            // 获取 PathList: Element[] nativeLibraryPathElements
            Field nativeLibraryPathElementArray =
                    pathListObj.getClass().getDeclaredField("nativeLibraryPathElements");
            nativeLibraryPathElementArray.setAccessible(true);
            Object[] nativeLibraryPathElements = (Object[]) nativeLibraryPathElementArray.get(pathListObj);

            Object[] newNativeElements =
                    (Object[]) Array.newInstance(elementClass, nativeLibraryPathElements.length + 1);
            // nativeLibraryPathElement
            Object nativeLibraryPathElement =
                    constructor.newInstance(new File(nativeLibraryPath), true, null, null);
            Object[] toAddNativeElementArray = new Object[]{nativeLibraryPathElement};

            System.arraycopy(nativeLibraryPathElements, 0, newNativeElements, 0,
                    nativeLibraryPathElements.length);
            System.arraycopy(toAddNativeElementArray, 0, newNativeElements,
                    nativeLibraryPathElements.length, toAddNativeElementArray.length);

            nativeLibraryPathElementArray.set(pathListObj, newNativeElements);
        } else {
            Field nativeLibraryDirectoriesField = pathListObj.getClass().getDeclaredField("nativeLibraryDirectories");
            nativeLibraryDirectoriesField.setAccessible(true);
            File[] nativeLibraryDirectories = (File[]) nativeLibraryDirectoriesField.get(pathListObj);
            int n = nativeLibraryDirectories.length;
            File[] newNativeLibraryDirectories = new File[n + 1];
            System.arraycopy(nativeLibraryDirectories, 0, newNativeLibraryDirectories, 0, n);
            newNativeLibraryDirectories[n] = new File(nativeLibraryPath);
            nativeLibraryDirectoriesField.set(pathListObj, newNativeLibraryDirectories);
        }
    }
}


使用例子
                                // request.getPluginName()为插件apk名称，.os是在apk里面
                                String pluginSDK_FileName = request.getPluginName() + ".apk";
                                String pluginDEX_FileName = request.getPluginName() + ".odex";
                                File apkFile = GlobalParam.getInstance().getFileStreamPath(pluginSDK_FileName);
                                File odexFile = GlobalParam.getInstance().getFileStreamPath(pluginDEX_FileName);
                                Log.i(TAG, "hook ClassLoader apk:" + pluginSDK_FileName + ",odex:" + pluginDEX_FileName + ",nativeLibPath:" + nativeLibPath);
                                BaseDexClassLoaderHookHelper.patchClassLoader(GlobalParam.getInstance().getClassLoader(), apkFile, odexFile, nativeLibPath);

